(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.Search = factory());
}
(this, (function () { 'use strict';
function searchIdIterm(input,productList){
        let regexp = RegExp(input);
        let newproductList=productList.filter(function(element){
            return (element.itermId+' ').match(regexp);
        })
        Render.renderBodyTable(newproductList) ;
    };
    function searchProductName(input,productList){
        let regexp = RegExp(input.toLocaleLowerCase());
        let newproductList=productList.filter(function(element){
            return element.productName.toLocaleLowerCase().match(regexp);
        })
        Render.renderBodyTable(newproductList);
    };
    function ActualPriceLessThan(input,productList){
        let newproductList=productList.filter(function(element){
            return parseInt(element.actualPrice) < parseInt(input) ;
        })
        Render.renderBodyTable(newproductList);
    }
    function ActualPriceGreaterThan(input,productList){
        let newproductList=productList.filter(function(element){
            return parseInt(element.actualPrice) > parseInt(input) ;
        })
        Render.renderBodyTable(newproductList);
    }
    function searchActualPriceEqual(input,productList){
        let regexp = RegExp(input);
        let newproductList=productList.filter(function(element){
            return element.actualPrice.match(regexp);
        })
        Render.renderBodyTable(newproductList);
    };
    function DiscountPriceLessThan(input,productList){
        let newproductList=productList.filter(function(element){
            return parseInt(element.discountPrice) < parseInt(input) ;
        })
        Render.renderBodyTable(newproductList);
    }
    function DiscountPriceGreaterThan(input,productList){
        let newproductList=productList.filter(function(element){
            return parseInt(element.discountPrice) > parseInt(input) ;
        })
        Render.renderBodyTable(newproductList);
    }
    function searchDiscountPriceEqual(input,productList){
        let regexp = RegExp(input);
        let newproductList=productList.filter(function(element){
            return element.discountPrice.match(regexp);
        })
        Render.renderBodyTable(newproductList);
    };
    function StockAvailableGreaterThan(input,productList){
        let newproductList=productList.filter(function(element){
            return parseInt(element.stockAvailable) > parseInt(input) ;
        })
        Render.renderBodyTable(newproductList);
    }
    function StockAvailableLessThan(input,productList){
        let newproductList=productList.filter(function(element){
            return parseInt(element.stockAvailable) < parseInt(input) ;
        })
        Render.renderBodyTable(newproductList);
    }
     function searchStockAvailableEqual(input,productList){
        let regexp = RegExp(input);
        let newproductList=productList.filter(function(element){
            return element.stockAvailable.match(regexp);
        })
        Render.renderBodyTable(newproductList);
    };

     

var Search = {
    IdIterm: searchIdIterm,
    ProductName:searchProductName,
    ActualPriceEqual: searchActualPriceEqual,
    DiscountPriceEqual:searchDiscountPriceEqual,
    ActualPriceLessThan:ActualPriceLessThan,
    ActualPriceGreaterThan:ActualPriceGreaterThan,
    DiscountPriceGreaterThan:DiscountPriceGreaterThan,
    DiscountPriceLessThan:DiscountPriceLessThan,
    StockAvailableEqual:searchStockAvailableEqual,
    StockAvailableGreaterThan:StockAvailableGreaterThan,
    StockAvailableLessThan:StockAvailableLessThan,

}
return Search;

})));

